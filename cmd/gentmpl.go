// Generates package with embedded templates.
package main

import (
	"flag"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var pkgTemplate = `// Code generated by gentmpl. DO NOT EDIT.
package {{.Package}}

var {{.Map}} = map[string]string{
{{- range $name, $raw := .Templates}}
	"{{$name}}": {{$raw}},
{{- end}}
}
`

func name(file string) string {
	return strings.TrimSuffix(filepath.Base(file), ".tmpl")
}

func raw(text string) string {
	return "`" + strings.Replace(text, "`", "` + \"`\" + `", -1) + "`"
}

func main() {
	var src, dst string
	flag.StringVar(&src, "src", "templates", "template source directory")
	flag.StringVar(&dst, "dst", "tmpl", "generated code directory")
	flag.Parse()

	pkg := struct {
		Package   string
		Map       string
		Templates map[string]string
	}{
		dst,
		strings.Title(src),
		make(map[string]string),
	}

	tmplFiles, err := filepath.Glob(filepath.Join(src, "*.tmpl"))
	if err != nil {
		log.Fatal(err)
	}
	for _, file := range tmplFiles {
		tmpl, err := ioutil.ReadFile(file)
		if err != nil {
			log.Fatal(err)
		}
		pkg.Templates[name(file)] = raw(string(tmpl))
	}

	if err = os.MkdirAll(dst, 0755); err != nil {
		log.Fatal(err)
	}
	file, err := os.Create(filepath.Join(dst, src+".go"))
	if err != nil {
		log.Fatal(err)
	}
	template.Must(template.New("").Parse(pkgTemplate)).Execute(file, pkg)
	file.Close()
}
